const { vk, logger, cfg } = require('./vk');
const fs = require('fs');
const time = require('moment');
const countdown = require('countdown');

let ARRAY_CMD = require('../dbs/vk-db/cmds.json');
const utils = require('../modules/utils');
let STRING_CMD = `üåå –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ [${ARRAY_CMD.length}]:\n`;
for(let i = 0; i < ARRAY_CMD.length; i++){
    STRING_CMD += `> ${ARRAY_CMD[i]}\n`;
}
STRING_CMD += "\n\n‚ùó * - –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –ü.–î\n";
STRING_CMD += "‚ùó ! - –ù–µ –æ–±—è–∑.–∞—Ä–≥—É–º–µ–Ω—Ç\n";
STRING_CMD += "‚ùó + - –¢–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º";

vk.updates.hear(/^\/stuff( )?/i, (ctx) => {
    if(ctx.$match[1]){return 1;}
    let stuff = JSON.parse(fs.readFileSync('./dbs/server-db/admins.json'));
    let message = `‚öô –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø [${stuff.length}]:\n`;
    for(let i = 0; i < stuff.length; i++){
        message += `> ${stuff[i].name}\n`;
    }
    return ctx.send(message);
});

vk.updates.hear(/^\/cmd/i, (ctx)=>{
    return ctx.send(STRING_CMD);
});

vk.updates.hear(/–∫–ª–∞–Ω (–≤—Å—Ç—É–ø–∏—Ç—å|–≤–æ–π—Ç–∏) 26274/i, (ctx) => {
    let new_users = JSON.parse(fs.readFileSync('./dbs/vk-db/new-users.json'));
    let user = utils.findOBJ(new_users, 'id', ctx.senderId);
    if(user){
        ctx.send(`üåå [id${user.el.id}|${user.el.name}], –≤—ã —É—Å–ø–µ–ª–∏ –≤–æ–π—Ç–∏ –≤ –∫–ª–∞–Ω!`);
        new_users.splice(user.ind, 1);
        return fs.writeFileSync('./dbs/vk-db/new-users.json', JSON.stringify(new_users, '', 4));
    }
});

vk.updates.hear(/^\/textad/i, (ctx) => {
    let data = JSON.parse(fs.readFileSync('./dbs/vk-db/clan-settings.json')).textAd;
    return ctx.send(data, {
        dont_parse_links: true
    });
});

vk.updates.hear(/^\/lesya/i, (ctx) => {
    let data = JSON.parse(fs.readFileSync('./dbs/vk-db/clan-settings.json')).lesyaLink;
    return ctx.send(`üåå –ö–∏–¥–∞—Ç—å —Ä–µ–∫–ª–∞–º—É —Å—é–¥–∞:\n${data}`, {
        dont_parse_links: true
    });
});

vk.updates.hear(/^\/link/i, (ctx) => {
    let data = JSON.parse(fs.readFileSync('./dbs/vk-db/clan-settings.json')).link;
    return ctx.send(`üåå –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –ø–æ —Å—Å—ã–ª–∫–µ:\n${data}`, {
        dont_parse_links: true
    });
});

vk.updates.hear(/^\/reg( )?([0-9]+)?( )?([\w\W]+)?/i, (ctx) => {
    let users = JSON.parse(fs.readFileSync('./dbs/vk-db/users.json'));
    if(!ctx.$match[2] || !ctx.$match[4]){ return ctx.send(`‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: /reg [ID –∏–∑ Lesya] [–ù–∏–∫ –∏–∑ Lesya]`); }
    if(!utils.findOBJ(users, 'id', ctx.senderId)){
        users.push({
            id: ctx.senderId,
            nick: ctx.$match[4],
            lid: ctx.$match[2]
        });
        fs.writeFileSync('./dbs/vk-db/users.json', JSON.stringify(users, '', 4));
        return ctx.send(`üåå –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!\nüòÅ –û—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫ –Ω–æ–≤—ã–º –∫–æ–º–∞–Ω–¥–∞–º!\n‚öô –ß—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ:\n&#12288;‚öô /nick [–ù–æ–≤—ã–π –Ω–∏–∫]\n&#12288;‚öô /id [–ù–æ–≤—ã–π ID]`);
    } else {
        return ctx.send(`‚ùó –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–æ–≤–∞–Ω—ã!`);
    }
});

vk.updates.hear(/^\/nick( )?([\w\W]+)?/i, (ctx) => {
    if(!ctx.$match[2]){
        return ctx.send(`‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: /nick [–ù–æ–≤—ã–π –Ω–∏–∫]`);
    }
    let users = JSON.parse(fs.readFileSync('./dbs/vk-db/users.json'));
    let check = utils.findOBJ(users, 'id', ctx.senderId);
    if(!check){ 
        return ctx.send(`‚ùó –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: /reg [ID –∏–∑ Lesya] [–ù–∏–∫ –∏–∑ Lesya]`);
    }
    users[check.ind].nick = ctx.$match[2];
    fs.writeFileSync('./dbs/vk-db/users.json', JSON.stringify(users, '', 4));
    return ctx.send(`üåå –ù–æ–≤—ã–π –Ω–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!`);
});

vk.updates.hear(/^\/id( )?([0-9]+)?/i, (ctx) => {
    if(!ctx.$match[2]){
        return ctx.send(`‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: /id [–ù–æ–≤—ã–π ID]`);
    }
    let users = JSON.parse(fs.readFileSync('./dbs/vk-db/users.json'));
    let check = utils.findOBJ(users, 'id', ctx.senderId);
    if(!check){ 
        return ctx.send(`‚ùó –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: /reg [ID –∏–∑ Lesya] [–ù–∏–∫ –∏–∑ Lesya]`);
    }
    users[check.ind].lid = ctx.$match[2];
    fs.writeFileSync('./dbs/vk-db/users.json', JSON.stringify(users, '', 4));
    return ctx.send(`üåå –ù–æ–≤—ã–π ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω!`);
});

vk.updates.hear(/^\/mybattle( )?([0-9\.]{10})?( )?([1-9]+)?/i, (ctx) => {
    let users = JSON.parse(fs.readFileSync('./dbs/vk-db/users.json'));
    let check = utils.findOBJ(users, 'id', ctx.senderId);
    if(!check){return ctx.send(`‚ùó –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: /reg [ID –∏–∑ Lesya] [–ù–∏–∫ –∏–∑ Lesya]`);}
    let battles = JSON.parse(fs.readFileSync('./dbs/vk-db/battles.json'));
    let date = ctx.$match[2] || time().format('DD.MM.YYYY');
    let dateMSG = (ctx.$match[2]) ? `–∑–∞ ${ctx.$match[2]}` : '–∑–∞ —Å–µ–≥–æ–¥–Ω—è';
    if(battles[date]){
        let player = utils.findOBJ(battles[date]['users'], 'nick', check.el.nick);
        if(player){
            if(!ctx.$match[4]){
                player = player.el;
                let message = `üåå ${player.nick}, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ${dateMSG}:\n`;
                message += `‚öô –ù–æ—Ä–º–∞ [${battles[date].norm}]: ${(player.all >= battles[date].norm) ? '–í—ã–ø–æ–ª–Ω–µ–Ω–∞' : '–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞'}\n`;
                message += `‚úäüèª –í—Å–µ–≥–æ: ${player.all}\n`;
                message += `üòÅ –ü–æ–±–µ–¥: ${player.win}\n`;
                message += `üòî –ü—Ä–æ–∏–≥—Ä—ã—à–µ–π: ${player.lose}\n\n`;
                for(let i = 0; i < player.battles.length; i++){
                    let { result, end } = player.battles[i];
                    if(!result){
                        message += `${i+1}. –ò–¥–µ—Ç –±–æ–π...\n`;
                    } else {
                        message += `${i+1}. ${end} - ${result}\n`;
                    }
                }
                message += `\nüí¢ –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—è: /mybattle [–î–∞—Ç–∞] [–ù–æ–º–µ—Ä –±–æ—è]\n`;
                return ctx.send(message);
            } else {
                ctx.$match[4] -= 1;
                if(player.el.battles[ctx.$match[4]]){
                    let message = `üåå ${player.el.nick}, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—è ${dateMSG}:\n`;
                    let { enemy, result, end, start } = player.el.battles[ctx.$match[4]];
                    message += `üòà –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: ${enemy}\n`;
                    message += `‚öî –ù–∞—á–∞–ª–æ: ${start}\n`;    
                    message += `üö¨ –ö–æ–Ω–µ—Ü: ${(!end) ? '–ò–¥–µ—Ç –±–æ–π...' : end}\n`; 
                    message += `üèÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${(!result) ? '–ò–¥–µ—Ç –±–æ–π...' : result}\n`;
                    return ctx.send(message);   
                } else {
                    return ctx.send(`‚ùó‚ùó –ë–æ–π —Å —É–∫–∑–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω!`)
                }
            }
        } else {
            return ctx.send(`üåÄ –£ –≤–∞—Å –Ω–µ –±—ã–ª–æ –±–æ—ë–≤ ${dateMSG}!`);
        }
    } else {
        return ctx.send(`üåÄ –ë–æ—ë–≤ ${dateMSG} –Ω–µ –±—ã–ª–æ!`);
    }
});

vk.updates.hear(/^\/norm/i, (ctx) => {
    let battles = JSON.parse(fs.readFileSync('./dbs/vk-db/battles.json'));
    let date = time().format('DD.MM.YYYY');
    if(!battles[date]){return ctx.send(`üåå –ù–æ—Ä–º–∞ –±–æ—ë–≤ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!`);}
    return ctx.send(`üåå –ù–æ—Ä–º–∞ –±–æ–µ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: ${battles[date].norm}`);
});

vk.updates.hear(/^\/top( )?([0-9\.]{10})?( )?(all|win|lose)?/i, (ctx) => {
    let battlesGlobal = JSON.parse(fs.readFileSync('./dbs/vk-db/battles.json'));
    let date = ctx.$match[2] || time().format('DD.MM.YYYY');
    let dateMSG = (ctx.$match[2]) ? ctx.$match[2] : '—Å–µ–≥–æ–¥–Ω—è';
    let sortType = ctx.$match[4] || false;
    if(!battlesGlobal[date]){
        return ctx.send(`üåå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –±–æ—ë–≤ –∑–∞ ${dateMSG}!`);
    }
    let { users, all, win, lose, norm} = battlesGlobal[date];
    if(sortType){
        switch(sortType){
            case 'all': { 
                let message = `[üåå] –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –∑–∞ ${dateMSG} –ø–æ –±–æ—è–º:\n\n`;
                let sort = users.sort((a, b) => {
                    return b.all - a.all;
                });
                let sortLength = (sort.length > 5) ? 5 : sort.length;
                for(let i = 0; i < sortLength; i++){  
                    if(i <= 2) 
                        message += `[‚öî] ${sort[i].nick} - ${sort[i].all}\n`;
                    else 
                        message += `[üó°] ${sort[i].nick} - ${sort[i].all}\n`;
                }
                return ctx.send(message);
            }
            case 'win': { 
                let message = `[üåå] –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –∑–∞ ${dateMSG} –ø–æ –ø–æ–±–µ–¥–∞–º:\n`;
                let sort = users.sort((a, b) => {
                    return b.win - a.win;
                });
                let sortLength = (sort.length > 5) ? 5 : sort.length;
                for(let i = 0; i < sortLength; i++){  
                    if(i <= 2) 
                        message += `[üëë] ${sort[i].nick} - ${sort[i].win}\n`;
                    else 
                        message += `[üèÖ] ${sort[i].nick} - ${sort[i].win}\n`;
                }
                return ctx.send(message);
            }
            case 'lose': { 
                let message = `[üåå] –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –∑–∞ ${dateMSG} –ø–æ –ø—Ä–æ–∏–≥—Ä—ã—à–∞–º:\n\n`;
                let sort = users.sort((a, b) => {
                    return b.lose - a.lose;
                });
                let sortLength = (sort.length > 5) ? 5 : sort.length;
                for(let i = 0; i < sortLength; i++){  
                    if(i <= 2) 
                        message += `[üö¨] ${sort[i].nick} - ${sort[i].lose}\n`;
                    else 
                        message += `[üòî] ${sort[i].nick} - ${sort[i].lose}\n`;
                }
                return ctx.send(message);
            }
        }
        return 1;
    } else {
        let message = `[üåÄ] –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –∑–∞ ${dateMSG} –ø–æ –±–æ—è–º:\n\n`;
        let sort = users.sort((a, b) => {
            return b.all - a.all;
        });
        let sortLength = (sort.length > 5) ? 5 : sort.length;
        for(let i = 0; i < sortLength; i++){  
            if(i <= 2) 
                message += `[‚öî] ${sort[i].nick} - ${sort[i].all}\n`;
            else 
                message += `[üó°] ${sort[i].nick} - ${sort[i].all}\n`;
        }
        return ctx.send(message);
    }
});

vk.updates.hear(/^\/summer/i, (ctx) => {
    let message = `üåå –î–æ –ª–µ—Ç–∞ –æ—Å—Ç–∞–ª–æ—Å—å:\n`;
    let date = countdown(time(), new Date('2021/06/01'));
    message += `üåï –ú–µ—Å—è—Ü–µ–≤: ${date.months}\n`;
    message += `üî• –î–Ω–µ–π: ${date.days}\n`;
    message += `üçé –ß–∞—Å–æ–≤: ${date.hours}\n`;
    message += `üçì –ú–∏–Ω—É—Ç: ${date.minutes}\n`;
    message += `üçâ —Å–µ–∫—É–Ω–¥: ${date.seconds}`;
    return ctx.send(message);
});

vk.updates.hear(/^\/20([0-9]{2})/i, (ctx) => {
    let message = `üåå –î–æ 20${ctx.$match[1]} –≥–æ–¥–∞ –æ—Å—Ç–∞–ª–æ—Å—å:\n`;
    let date = countdown(time(), new Date(`20${ctx.$match[1]}/01/01`));
    message += `üî• –õ–µ—Ç: ${date.years}\n`;
    message += `üåë –ú–µ—Å—è—Ü–µ–≤: ${date.months}\n`;
    message += `üå® –î–Ω–µ–π: ${date.days}\n`;
    message += `‚ùÑ –ß–∞—Å–æ–≤: ${date.hours}\n`;
    message += `ü•ó –ú–∏–Ω—É—Ç: ${date.minutes}\n`;
    message += `üçä —Å–µ–∫—É–Ω–¥: ${date.seconds}`;
    return ctx.send(message);
});

vk.updates.hear(/^\/kprofile/i, (ctx) => {
    let users = JSON.parse(fs.readFileSync('./dbs/vk-db/users.json'));
    let { el, ind } = utils.findOBJ(users, 'id', ctx.senderId);
    let battlesGlobal = JSON.parse(fs.readFileSync('./dbs/vk-db/battles.json'));
    let battlesDateKeys = Object.keys(battlesGlobal);
    if(el){
        let player = {
            nick: el.nick,
            id: el.id,
            lid: el.lid,
            win: 0,
            all: 0,
            lose: 0,
            norm: 0,
            today: {
                win: 0,
                lose: 0,
                all: 0,
                norm: '–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!'
            }
        };
        let message = `üåå [id${el.id}|${el.nick}], –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n`;
        if(battlesGlobal[time().format('DD.MM.YYYY')]){
            let find = utils.findOBJ(battlesGlobal[time().format('DD.MM.YYYY')].users, 'nick', el.nick);
            if(find){
                player.today.win = find.el.win;
                player.today.lose = find.el.lose;
                player.today.all = find.el.all;
                player.today.norm = (find.el.all >= battlesGlobal[time().format('DD.MM.YYYY')].norm) ? '–í—ã–ø–æ–ª–Ω–µ–Ω–∞' : '–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞'; 
            } else {
                player.today.win = `–í—ã –Ω–µ —Å—ã–≥—Ä–∞–ª–∏ –Ω–∏ 1-–≥–æ –±–æ—è!`;
                player.today.lose = `–í—ã –Ω–µ —Å—ã–≥—Ä–∞–ª–∏ –Ω–∏ 1-–≥–æ –±–æ—è!`;
                player.today.all = `–í—ã –Ω–µ —Å—ã–≥—Ä–∞–ª–∏ –Ω–∏ 1-–≥–æ –±–æ—è!`;
                player.today.norm = `–í—ã –Ω–µ —Å—ã–≥—Ä–∞–ª–∏ –Ω–∏ 1-–≥–æ –±–æ—è!`;
            }
        }
        for(let i = 0; i < battlesDateKeys.length; i++){
            let { users, norm } = battlesGlobal[battlesDateKeys[i]];
            let find = utils.findOBJ(users, 'nick', el.nick);
            if(find){
                player.all += find.el.all;
                player.win += find.el.win;
                player.lose += find.el.lose;
                player.norm += (find.el.all >= norm) ? 1 : 0;
            }
        }      
        message += `üë§Nick: ${player.nick}\n`;  
        message += `‚öô ID: ${player.id}\n`;  
        message += `‚öô LesyaID: ${player.lid}\n`;
        message += `‚öô –í—ã–ø–æ–ª–Ω–µ–Ω–æ –Ω–æ—Ä–º: ${player.norm}\n\n`;  
        message += `‚öî –í—Å–µ–≥–æ –±–æ—ë–≤: ${player.all}\n`;  
        message += `üèÖ –í—Å–µ–≥–æ –ø–æ–±–µ–¥: ${player.win}\n`;  
        message += `üòî –í—Å–µ–≥–æ –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π: ${player.lose}\n\n`;  
        message += `üî• –ë–æ—ë–≤ —Å–µ–≥–æ–¥–Ω—è: ${player.today.all}\n`;  
        message += `üî• –ü–æ–±–µ–¥ —Å–µ–≥–æ–¥–Ω—è: ${player.today.win}\n`;  
        message += `üî• –ü—Ä–æ–∏–≥—Ä—ã—à–µ–π —Å–µ–≥–æ–¥–Ω—è: ${player.today.lose}\n`;  
        message += `üî• –ù–æ—Ä–º–∞ —Å–µ–≥–æ–¥–Ω—è: ${player.today.norm}\n`;  
        return ctx.send(message);
    } else {
        return ctx.send(`üåå –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã –≤ –±–æ—Ç–µ!\nüåå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /reg`);
    }
});

vk.updates.hear(/^\/promo/i, (ctx) => {
    let codes = JSON.parse(fs.readFileSync('./dbs/vk-db/promocodes.json'));
    let message = `üåå –ü—Ä–æ–º–æ–∫–æ–¥—ã:\n\n`;
    for(let i = 0; i < codes.length; i++){
        message += `üÜì –ö–æ–¥: ${codes[i].text}\n&#12288;üë§ –û—Ç: ${codes[i].admin}\n\n`;
    }
    return ctx.send(message);
});

vk.updates.hear(/^\/history/i, (ctx) => {
    let history = fs.readFileSync('./dbs/vk-db/story.txt', {encoding: 'utf8'});
    return ctx.send(history);
});